ガワだけには負けられない

========================================
スコープとスコープチェイン
========================================

参考：
https://jsprimer.net/basic/function-scope/#block-scope


/////////////////////////////////
//// SCOPE

定義された関数はそれぞれのスコープを持っている。
スコープとは変数や関数の引数などを参照できる範囲。
関数を定義するということは処理をまとめるというだけではなく、変数が有効な範囲を決める新しいスコープを作っている。


### 1、GLOBAL SCOPE ###

const me = 'Setsuto';
const job = 'free';
const year = 1993;

最上位レベルのコード、これらの変数はどこでもアクセスが可能。



### 2、FUNCTION SCOPE ###

function calcAge(birthyear) {
  const now = 2020;
  const age = now - birthYear;
  return age;
}

console.log(now); // ReferenceError

関数内でのみアクセスが可能。



### 3、BLOCK SCOPE (ES6) ###
if (year >= 1993 && year <= 1996) {
  const millenial = true;
  const food = 'Avocado toast';
}

console.log(millenial); // ReferenceError

{  }で囲んだ範囲をブロックと呼ぶ。
ブロック内で宣言された変数は、スコープ内でのみ参照でき、スコープの外側からはアクセスできない。
let、const 変数のみ、varで宣言された変数は自動的に終了する。


//////////////////////////////
//// SCOPE CHAIN


////////////////////
//// OK
内側から外側のスコープへと順番に変数が定義されているか探す仕組みのことをスコープチェーンと呼ぶ。

// 1．Global scope ： myName = 'Setsuto'
-------------------------------------------------------------------------------
const myName = 'Setsuto';
{
function first() {

// 2、first() scope ： age = 26
----------------------------------------
  const age = 26;
  
  if (age >= 26) { // true
    const decade = 3;
    var millenial = true;
  }
  
  function second() {
  
// 3、second() Scope ： job = 'free'
--------------------
    const job = 'free';
    
    console.log(`${myName} is a ${age}-old ${job}`);
    // Setsuto is a 26-old free
--------------------
  }
  second();  
----------------------------------------
  
}

first();
--------------------------------------------------------------------------------

console.log(`${myName} is a ${age}-old ${job}`);
⇒ 3のスコープ内に変数があるかを確認 = job 取得
　⇒ 2のスコープ内に age の変数を確認 = age 取得
　　⇒ 1のスコープ内に myName の変数を確認 = myname 取得
　　　⇒ console.log(`${myName} is a ${age}-old ${job}`); が実行可能



////////////////////
//// NG
const a = 'Setsuto';
first();

function first() {
  const b = 'Hello!';
  second();
  
  function second() {
  const c = 'Hi!';
  third();
  }
}

function third() {
  const d = 'Hey!';
  console.log(d + c + b + a);
  // REferenceError
  // 変数 B, C がスコープ外 & 関数スコープ内で定義されているためアクセスができない状態。
}

/////////////////////
//// memo

'use strict';

const firstName = 'Setsuto'
calcAge(1993);
// console.log(age);

function calcAge(birthYear) {
  const age = 2020 - birthYear;

  function printAge() {
    const output = `${firstName}, you are ${age}, born in ${birthYear}`;
    console.log(output);

    if (birthYear >= 1981 && birthYear <= 1996) {
      var millenial = true;
      // Creating NEW variable with same name as outer scope7s variable
      const firstName = 'Tanabe';

      // Reassingning outer scope's variable
      output = 'NEW OUTPUT!';
      
      const str = `Oh, and you're a millenial, ${firstName}`;
      console.log(str);

      function add(a,b) {
        return a + b;
      }
    }
    // console.log(str);
    console.log(millenial);
    // console.log(add(2, 3));
    console.log(output);
  }
  printAge();

  return age;
}





========================================
this を理解する
========================================

1：this は function を呼んだ時の "." の前についているオブジェクトを指している
2："." を省略するとグローバルオブジェクトを参照する
3：call、applyを使うと "." の前のオブジェクトを指定できる
4：bindを使うと "." の前のオブジェクトに強制できる
5：function が基準スコープ

例）

function test() {
    console.log(this)
}

est() // => Window {frames: Window, postMessage: ?, blur: ?, focus: ?, close: ?, …}

⇒ 呼び出し時に . がないので、 this はグローバルオブジェクト、ブラウザでは Window オブジェクトになります (non-strict モード)。

この関数 testを特定のオブジェクトに結びつける

function test() {
    console.log(this)
}
var obj = {}
obj.test = test

obj.test() // => {test: ?}






========================================
コールバック関数
========================================

function hello(callback) {
  // 2：getNameがわたってきている
  console.log('hello '+ callback()); 
  // 3-1：getNameを実行()、4：hello Setsuto Tanabeが出力される
}

function getName() {
  return 'Setsuto Tanabe';
}
// 3-2：関数（getName）の戻り値 'Setsuto tanabe' が実行される

hello(getName);
// 1：hello実行時にgetNameを引数に渡している

⇒ コールバック関数とは引数に渡す関数のこと。

練習1：

const greet = function(greeting) {
  return function(name) {
    console.log(`${greeting} ${name}`);
  };
};

const greeterHey = greet('Hey');
greeterHey('Tanabe');
greeterHey('Setsuto');

greet('Hello')('Tanabe');


矢印使用：

const greetArr = greeting => name => console.log(`${greeting} ${name}`);

greetArr('Hello')('Tanabe');
