■JavaScriptの実行環境

・JSはJavaScriptエンジンで実行される。
・一番シェアがあるJSエンジンはV8といわれる。
・JSからWeb APIsを通してブラウザを操作する。
※Web APIs = chromeのようなソフトウェアが提供しているプログラムのコードからアプリケーションを操作するための仕組み。



■JavaScriptのコードが実行されるまで

JavaScriptエンジン = [コード、Window(Web APIs)、this];

・グローバルオブジェクト
⇒ JSエンジンによって生成されるコード内のどこからでもアクセスできるオブジェクト。

・JavaScript実行前には"グローバルオブジェクト"と"this"が用意されている。
・ブラウザのグローバルオブジェクトはWindowオブジェクトとなる。



■実行コンテキスト

JavaScriptエンジン (実行コンテキスト = [コード、Window(Web APIs)、this];)

コンテキスト：コードを実行する際の文脈・状況

・グローバルコンテキスト
⇒ 実行中の"コンテキスト内の変数・関数"
⇒ グローバルオブジェクト
⇒ this


・関数コンテキスト
⇒ 実行中の"コンテキスト内の変数・関数"
⇒ arguments、super、this、外部変数



■コールスタック

・コールスタック
⇒ 実行中のコードがたどってきたコンテキストの積み重ね

例）コールスタック
function a() {} = 処理1
function b() { a(); } 処理2
function c() { b(); } 処理3
c(); 処理4
グローバル 処理5

⇒ 後から積み重なったものが一番最初に消滅する「LIFO」という。



■ホイスティング

・Hoisting（宣言の巻き上げ）
⇒ コンテキスト内で宣言した変数や関数の定義をコード実行前にメモリーに配置すること。



a();

function a() {
  console.log('a is called');
}

var b;　　　変数Bのメモリスペースを確保、undefinedが自動的に設定

console.log(b);　　　undefinedが出力

b = 0;　　　メモリスペースに値を代入

console.log(b);　　　0が出力


⇒ 宣言のキーワードを見つけたらメモリにスペースを確保、undifinedが設定される。
※undefinedが設定されるのはvarのみ、letやconstの場合エラーが出力される。






